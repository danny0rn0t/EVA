# -*- coding: utf-8 -*-
"""CMU-MOSEI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q3W52XwNyhJLPxbBpoxjvarqH9cK8GPQ
"""



"""### Mount Drive"""

# from google.colab import drive
# drive.mount('/content/gdrive')

"""### Install Packages"""

# !pip install wget
# !pip install transformers

"""### Download Dataset"""

# !wget -r --no-parent -R "index.html*" http://immortal.multicomp.cs.cmu.edu/raw_datasets/processed_data/cmu-mosei/seq_length_20/
import wget
import os
url_root = 'http://immortal.multicomp.cs.cmu.edu/raw_datasets/processed_data/cmu-mosei/seq_length_20/'
datas = ['audio_test.h5', 'audio_train.h5', 'audio_valid.h5']
# labels = ['mosi2uni_Test_labels_5class.csv', 'mosi2uni_Train_labels_5class.csv']
elabels = ['ey_test.h5', 'ey_train.h5', 'ey_valid.h5']
labels = ['y_test.h5', 'y_train.h5', 'y_valid.h5']

os.makedirs('./MOSEI/', exist_ok=True)

for file_name in datas + labels:
  if os.path.exists('./MOSEI/' + file_name):
    continue
  url = url_root + 'data/' + file_name
  out_path = './MOSEI/'+file_name
  wget.download(url, out=out_path)
print(os.listdir('./MOSEI/'))

"""### Data Preprocessing"""

import pandas as pd
import h5py
import numpy as np

#./immortal.multicomp.cs.cmu.edu/raw_datasets/processed_data/cmu-mosei/seq_length_20/data/audio_train.h5

dataset_dir = './MOSEI/'
train_data_path = dataset_dir + 'audio_train.h5'
train_label_path = dataset_dir + 'y_train.h5'
dev_data_path = dataset_dir + 'audio_valid.h5'
dev_label_path = dataset_dir + 'y_valid.h5'
test_data_path = dataset_dir + 'audio_test.h5'
test_label_path = dataset_dir + 'y_test.h5'
with h5py.File(train_data_path, 'r') as f:
  train_data = np.array(f['d1'])
with h5py.File(train_label_path, 'r') as f:
  train_label = np.array(f['d1'])
with h5py.File(dev_data_path, 'r') as f:
  dev_data = np.array(f['d1'])
with h5py.File(dev_label_path, 'r') as f:
  dev_label = np.array(f['d1'])
with h5py.File(test_data_path, 'r') as f:
  test_data = np.array(f['d1'])
with h5py.File(test_label_path, 'r') as f:
  test_label = np.array(f['d1'])

# print(data.shape)
print(train_data.shape, train_label.shape)
print(dev_data.shape, dev_label.shape)
print(test_data.shape, test_label.shape)
print(len(train_data) + len(dev_data) + len(test_data))

'''
def cmumosei_round(a):
  if a < -2:
    res = -3
  if -2 <= a and a < -1:
    res = -2
  if -1 <= a and a < 0:
    res = -1
  if 0 <= a and a <= 0:
    res = 0
  if 0 < a and a <= 1:
    res = 1
  if 1 < a and a <= 2:
    res = 2
  if a > 2:
    res = 3
  return res

for i in range(len(train_label)):
  train_label[i] = cmumosei_round(train_label[i])
for i in range(len(dev_label)):
  dev_label[i] = cmumosei_round(dev_label[i])
for i in range(len(test_label)):
  test_label[i] = cmumosei_round(test_label[i])
'''